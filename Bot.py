import requests
from bs4 import BeautifulSoup
import asyncio
from aiogram import Bot, Dispatcher

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
BOT_TOKEN = '6953007603:AAEhzpI7VKVJMQBl9YQoNmNId6mSb5Rkmyg'  # –í—Å—Ç–∞–≤ —Å—é–¥–∏ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
CHAT_ID = '@MaksANDR1694'      # –í—Å—Ç–∞–≤ —Å—é–¥–∏ —Å–≤—ñ–π Chat ID

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä
previous_count = None

# === –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É —Å–∞–π—Ç—É ===
def get_apartments_count():
    url = 'https://atlant.build/obekty/zhk-na-petlyury-28/kompleks-28'
    headers = {'User-Agent': 'Mozilla/5.0'}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, 'html.parser')

    cards = soup.find_all('div', class_='complex__house-card')
    for card in cards:
        number = card.find('div', class_='complex__house-number')
        if number and number.text.strip() == '3':
            info = card.find('p', class_='complex__house-status')
            if info:
                count = int(''.join(filter(str.isdigit, info.text)))
                return count
    return None

# === –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ===
async def check_apartments():
    global previous_count
    try:
        count = get_apartments_count()
        if count is None:
            await bot.send_message(CHAT_ID, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ 3-–π –±—É–¥–∏–Ω–æ–∫.")
            return

        if previous_count is None:
            previous_count = count
        elif count != previous_count:
            await bot.send_message(
                CHAT_ID,
                f"üè¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–ª—å–Ω–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä —É 3-–º—É –±—É–¥–∏–Ω–∫—É –∑–º—ñ–Ω–∏–ª–∞—Å—è: {count} (–±—É–ª–æ {previous_count})"
            )
            previous_count = count
    except Exception as e:
        await bot.send_message(CHAT_ID, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ: {e}")

# === –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ–≥–æ–¥–∏–Ω–∏) ===
async def scheduler():
    while True:
        await check_apartments()
        await asyncio.sleep(3600)  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 60 —Ö–≤–∏–ª–∏–Ω

if __name__ == '__main__':
    asyncio.run(scheduler())
